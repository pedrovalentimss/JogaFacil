@inject IReservationService reservationService;
@inject IArenasService arenasService;
@using Models
@using Services

<h5>Aguardando aprovação:</h5>
@if (reservations == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="overflow-auto h-50">
        @foreach (var reservation in reservations)
        {
            <div class="card mb-3">
                <div class="card-body">
                    <div class="row no-gutters">
                        <div class="col-8">
                            <h5 class="card-title">Marcos Souza</h5>
                            <p class="text-muted mb-0">
                                @GetArenaNameFromId(reservation)
                            </p>
                            <p class="card-text">
                                <i class="fa fa-fw fa-calendar-alt"></i>
                                @reservation.StartTime.ToShortDateString() -
                                <i class="fa fa-fw fa-clock"></i>
                                @reservation.StartTime.ToShortTimeString()
                            </p>
                        </div>
                        <div class="col-4 align-self-center">
                            <button class="btn btn-success m-1" @onclick="(() => ChangeReservationStatus(reservation, ReservationStatus.Approved))">Aprovar</button>
                            <button class="btn btn-danger m-1" @onclick="(() => ChangeReservationStatus(reservation, ReservationStatus.Denied))">Rejeitar</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    public Reservation[] reservations { get; set; }

    protected override async Task OnInitializedAsync()
    {
        reservations = await reservationService.GetReservationsByStatus((int)ReservationStatus.WaitingApprovement);
    }

    private async Task ChangeReservationStatus(Reservation reservation, ReservationStatus status)
    {
        reservation.Status = status;
        await EditReservation(reservation);
    }

    private async Task EditReservation(Reservation reservation)
    {
        reservationService.EditReservation(reservation);
        reservations = await reservationService.GetReservationsByStatus((int)ReservationStatus.WaitingApprovement);
    }

    private string GetArenaNameFromId(Reservation reservation)
    {
        var arena = reservation.Place.Arenas.Single(a => a.Id == reservation.ArenaId);
        return arena.Name;
    }
}
