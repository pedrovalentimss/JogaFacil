@page "/schedule"
@inject IReservationService reservationService;
@inject IArenasService arenasService;
@using Models
@using Services

<h2>Reservas</h2>

<div class="row">
    <div class="col-sm-12">
        <Calendar Reservations="reservationsFromPlace">
            <DayTemplate Context="day">
                @{
                    string currentDayClass = day.Date == DateTime.Now.Date ? "text-primary" : "";
                    string selectedDayClass = day == selectedDay ? "border border-secondary rounded" : "border border-white rounded";
                }
                @if (!day.IsEmpty)
                {
                    <div class="" @onclick="() => selectedDay = day">
                        <h5 class="@currentDayClass @selectedDayClass mt-2">@day.DayNumber</h5>
                    </div>
                }
            </DayTemplate>
        </Calendar>
    </div>
</div>
<div class="row">
    <div class="col-sm-12">
        <ReservationList SelectedDay="selectedDay" />
    </div>
</div>

@code {
    Reservation[] reservations;

    Reservation[] reservationsFromPlace;

    private CalendarDay selectedDay = new CalendarDay
    {
        Date = DateTime.Now,
    };

    protected override async Task OnInitializedAsync()
    {
        reservations = await reservationService.GetReservationsByStatus((int)ReservationStatus.WaitingApprovement);
        reservationsFromPlace = await reservationService.GetReservationsFromPlace(4);
    }

    private async Task ChangeReservationStatus(Reservation reservation, ReservationStatus status)
    {
        reservation.Status = status;
        await EditReservation(reservation);
    }

    private async Task EditReservation(Reservation reservation)
    {
        await reservationService.EditReservation(reservation)
            .ContinueWith(async (atecendent) => reservations = await reservationService.GetReservationsByStatus((int)ReservationStatus.WaitingApprovement));
    }

    private string GetArenaNameFromId(Reservation reservation)
    {
        var arena = reservation.Place.Arenas.Single(a => a.Id == reservation.ArenaId);
        return arena.Name;
    }
}
