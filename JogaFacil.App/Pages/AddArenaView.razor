@page "/arena/create/{Id:int}"
@inject IPlacesService placesService
@using Models
@using Services

<h3>Editar local</h3>

<EditForm Model="@arena" OnValidSubmit="EditPlace">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>Nome da arena:</label>
        <div>
            <InputText class="form-control" @bind-Value="arena.Name" />
            <ValidationMessage For="(() => arena.Name)" />
        </div>
    </div>
    <div class="form-group">
        <label>Tipo da arena:</label>
        <select required class="form-control custom-select" @bind="arena.Type">
            <option value="" disabled selected hidden>Selecione uma opção...</option>
            <option value="@ArenaType.Indoor">@ArenaType.Indoor.ToString()</option>
            <option value="@ArenaType.Outdoor">@ArenaType.Outdoor.ToString()</option>
        </select>

    </div>
    <div class="form-group">
        <label>Esporte:</label>
        <div>
            <InputText class="form-control" @bind-Value="arena.Sport" />
            <ValidationMessage For="(() => arena.Sport)" />
        </div>
    </div>
    <div class="form-group">
        <label>Descrição da arena:</label>
        <div>
            <InputText class="form-control" @bind-Value="arena.Description" />
            <ValidationMessage For="(() => arena.Description)" />
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Adicionar arena</button>

</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    public Place place { get; set; }

    public Arena arena { get; set; } = new Arena();



    public ArenaFormModel arenaFormModel { get; set; } = new ArenaFormModel();

    protected override async Task OnInitializedAsync()
    {
        place = await placesService.GetPlace(Id);
    }

    async Task EditPlace()
    {
        await placesService.EditPlace(place, arena);
    }
}
