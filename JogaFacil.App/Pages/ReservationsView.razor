@page "/reservations"
@inject IReservationService reservationService;
@inject IArenasService arenasService;
@using Models
@using Services

<h2>Reservas</h2>

<div class="row">
    <div class="col-sm-12">
        <h5>Aguardando aprovação:</h5>
        @if (reservations == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="overflow-auto h-100">
                @foreach (var reservation in reservations)
                {
                    <div class="card mb-3">
                        <div class="card-body">
                            <div class="row no-gutters">
                                <div class="col-8">
                                    <h5 class="card-title">@reservation.User.Name</h5>
                                    <p class="text-muted mb-0">
                                        @GetArenaNameFromId(reservation)
                                    </p>
                                    <p class="card-text">
                                        <i class="fa fa-fw fa-calendar-alt"></i>
                                        @reservation.StartTime.ToShortDateString() -
                                        <i class="fa fa-fw fa-clock"></i>
                                        @reservation.StartTime.ToShortTimeString()
                                    </p>
                                </div>
                                <div class="col-4 align-self-center">
                                    <button type="submit" class="btn btn-success m-1" @onclick="(async () => await ChangeReservationStatus(reservation, ReservationStatus.Approved))">Aprovar</button>
                                    <button type="submit" class="btn btn-danger m-1" @onclick="(async () => await ChangeReservationStatus(reservation, ReservationStatus.Denied))">Rejeitar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    Reservation[] reservations;

    Reservation[] reservationsFromPlace;

    private CalendarDay selectedDay = new CalendarDay
    {
        Date = DateTime.Now,
    };

    protected override async Task OnInitializedAsync()
    {
        reservations = await reservationService.GetReservationsByStatus((int)ReservationStatus.WaitingApprovement);
        reservationsFromPlace = await reservationService.GetReservationsFromPlace(4);
    }

    private async Task ChangeReservationStatus(Reservation reservation, ReservationStatus status)
    {
        reservation.Status = status;
        await EditReservation(reservation);
    }

    private async Task EditReservation(Reservation reservation)
    {
        await reservationService.EditReservation(reservation)
            .ContinueWith(async (atecendent) => reservations = await reservationService.GetReservationsByStatus((int)ReservationStatus.WaitingApprovement));
    }

    private string GetArenaNameFromId(Reservation reservation)
    {
        var arena = reservation.Place.Arenas.Single(a => a.Id == reservation.ArenaId);
        return arena.Name;
    }
}
